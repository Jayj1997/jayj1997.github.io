<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用gin作网关, etcd作服务发现实现go-grpc微服务的保姆级教程</title>
    <url>/2021/11/09/gin_etcd_microservices/</url>
    <content><![CDATA[<p>在网上有着数不清的帖子教学如何单独搭建grpc与etcd、如何使用go-grpc-gateway等等教程，如果你在读过这一大堆的文章教程之后，<br>仍然是没有搞懂网关如何接管RESTAPI的请求并转发、服务间如何通信、   网关如何鉴权，以及这每一块积木我都知道是做什么的，到底如何<br>拼起来这样的疑惑，可以通过读完这篇文章，快速构建起整个微服务框架。</p>
<h2 id="Before-Started"><a href="#Before-Started" class="headerlink" title="Before Started"></a>Before Started</h2><p>在开始之前，你应该先有golang的基础，如果还不明白golang怎么用，就先不要看这里了。</p>
<h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><p>首先,如果你还未搭建起ETCD服务,可以借鉴这份docker-compose，或者百度谷歌上有各种教程。</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  etcd-node1:</span><br><span class="line">    image: quay.io/coreos/etcd</span><br><span class="line">    container_name: etcd-node1</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;2379:2379&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2380:2380&#x27;</span></span><br><span class="line">    command: etcd -name etcd-node1 -advertise-client-urls http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2379</span> -listen-client-urls http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2379</span> -listen-peer-urls http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2380</span>  -initial-cluster-token etcd-cluster -initial-cluster <span class="string">&quot;etcd-node1=http://etcd-node1:2380,etcd-node2=http://etcd-node2:2380,etcd-node3=http://etcd-node3:2380&quot;</span> -initial-cluster-state new</span><br><span class="line">    networks:</span><br><span class="line">      - <span class="string">&#x27;etcd&#x27;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ../data/etcd/etcd1:/opt/etcd/data</span><br><span class="line">    environment:</span><br><span class="line">      - <span class="string">&#x27;ETCD_DATA_DIR=/opt/etcd/data&#x27;</span></span><br><span class="line"></span><br><span class="line">  etcd-node2:</span><br><span class="line">    image: quay.io/coreos/etcd</span><br><span class="line">    container_name: etcd-node2</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;23792:2379&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;23802:2380&#x27;</span></span><br><span class="line">    command: etcd -name etcd-node2 -advertise-client-urls http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2379</span> -listen-client-urls http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2379</span> -listen-peer-urls http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2380</span> -initial-cluster-token etcd-cluster -initial-cluster <span class="string">&quot;etcd-node1=http://etcd-node1:2380,etcd-node2=http://etcd-node2:2380,etcd-node3=http://etcd-node3:2380&quot;</span> -initial-cluster-state new</span><br><span class="line">    networks:</span><br><span class="line">      - <span class="string">&#x27;etcd&#x27;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ../data/etcd/etcd2:/opt/etcd/data</span><br><span class="line">    environment:</span><br><span class="line">      - <span class="string">&#x27;ETCD_DATA_DIR=/opt/etcd/data&#x27;</span></span><br><span class="line"></span><br><span class="line">  etcd-node3:</span><br><span class="line">    image: quay.io/coreos/etcd</span><br><span class="line">    container_name: etcd-node3</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;23793:2379&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;23803:2380&#x27;</span></span><br><span class="line">    command: etcd -name etcd-node3 -advertise-client-urls http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2379</span> -listen-client-urls http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2379</span> -listen-peer-urls http://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2380</span> -initial-cluster-token etcd-cluster -initial-cluster <span class="string">&quot;etcd-node1=http://etcd-node1:2380,etcd-node2=http://etcd-node2:2380,etcd-node3=http://etcd-node3:2380&quot;</span> -initial-cluster-state new</span><br><span class="line">    networks:</span><br><span class="line">      - <span class="string">&#x27;etcd&#x27;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ../data/etcd/etcd3:/opt/etcd/data</span><br><span class="line">    environment:</span><br><span class="line">      - <span class="string">&#x27;ETCD_DATA_DIR=/opt/etcd/data&#x27;</span></span><br><span class="line"></span><br><span class="line">  etcd-keeper:</span><br><span class="line">    image: <span class="string">&#x27;evildecay/etcdkeeper&#x27;</span></span><br><span class="line">    container_name: <span class="string">&#x27;etcd-keeper&#x27;</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;8080:8080&#x27;</span></span><br><span class="line">    networks:</span><br><span class="line">      - <span class="string">&#x27;etcd&#x27;</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  etcd:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建一个etcd-compose.yml, 把上面的内容复制, 再输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose -f etcd-compose.yml up -d</span><br></pre></td></tr></table></figure>

<h3 id="protoc"><a href="#protoc" class="headerlink" title="protoc"></a>protoc</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/golang/protobuf.git &amp;&amp; <span class="built_in">cd</span> protobuf</span><br><span class="line">go install ./proto</span><br><span class="line">go install ./protoc-gen-go</span><br></pre></td></tr></table></figure>

<h2 id="Let’s-Code"><a href="#Let’s-Code" class="headerlink" title="Let’s Code"></a>Let’s Code</h2><p>首先，你需要两个项目，分别是 gateway 和 user, 为什么使用user作为第一个微服务的原因是user作为一个后台服务是最基础的部分，也更方便展示如何鉴权的功能。</p>
<h3 id="user-项目结构"><a href="#user-项目结构" class="headerlink" title="user 项目结构"></a>user 项目结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- discovery 服务注册</span><br><span class="line">  - instance.go</span><br><span class="line">  - register.go</span><br><span class="line">  - resolver.go</span><br><span class="line">- proto proto文件</span><br><span class="line">  - user</span><br><span class="line">    - user.pb.go</span><br><span class="line">    - user.proto</span><br><span class="line">- handler</span><br><span class="line">  - user.go</span><br><span class="line">- server main文件</span><br><span class="line">  - main.go</span><br><span class="line">- go.mod</span><br><span class="line">- go.sum</span><br></pre></td></tr></table></figure>

<h4 id="discovery"><a href="#discovery" class="headerlink" title="discovery"></a>discovery</h4><p>discovery文件是用来向ETCD注册服务、获取服务信息等功能的一套官方示例，对还在学习如何搭建起一套微服务框架的你，最好在之后再去搞懂这个文件的作用，目前我先把源码展示出来，将它按照结构复制进去即可,我会在之后的帖子详细讲述这些文件的内容都做了什么</p>
<p>instance.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> discovery</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"> <span class="string">&quot;errors&quot;</span></span><br><span class="line"> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;google.golang.org/grpc/resolver&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line"> Name    <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line"> Addr    <span class="keyword">string</span> <span class="string">`json:&quot;addr&quot;`</span>    <span class="comment">// 地址</span></span><br><span class="line"> Version <span class="keyword">string</span> <span class="string">`json:&quot;version&quot;`</span> <span class="comment">// 版本</span></span><br><span class="line"> Weight  <span class="keyword">int64</span>  <span class="string">`json:&quot;weight&quot;`</span>  <span class="comment">// 权重</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BuildPrefix</span><span class="params">(server Server)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"> <span class="keyword">if</span> server.Version == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;/%s/&quot;</span>, server.Name)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;/%s/%s/&quot;</span>, server.Name, server.Version)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BuildRegisterPath</span><span class="params">(server Server)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"> <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%s%s&quot;</span>, BuildPrefix(server), server.Addr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseValue</span><span class="params">(value []<span class="keyword">byte</span>)</span> <span class="params">(Server, error)</span></span> &#123;</span><br><span class="line"> server := Server&#123;&#125;</span><br><span class="line"> <span class="keyword">if</span> err := json.Unmarshal(value, &amp;server); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> server, err</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> server, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SplitPath</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="params">(Server, error)</span></span> &#123;</span><br><span class="line"> server := Server&#123;&#125;</span><br><span class="line"> strs := strings.Split(path, <span class="string">&quot;/&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">0</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> server, errors.New(<span class="string">&quot;invalid path&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> server.Addr = strs[<span class="built_in">len</span>(strs)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> server, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exist helper function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Exist</span><span class="params">(l []resolver.Address, addr resolver.Address)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"> <span class="keyword">for</span> i := <span class="keyword">range</span> l &#123;</span><br><span class="line">  <span class="keyword">if</span> l[i].Addr == addr.Addr &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove helper function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Remove</span><span class="params">(s []resolver.Address, addr resolver.Address)</span> <span class="params">([]resolver.Address, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"> <span class="keyword">for</span> i := <span class="keyword">range</span> s &#123;</span><br><span class="line">  <span class="keyword">if</span> s[i].Addr == addr.Addr &#123;</span><br><span class="line">   s[i] = s[<span class="built_in">len</span>(s)<span class="number">-1</span>]</span><br><span class="line">   <span class="keyword">return</span> s[:<span class="built_in">len</span>(s)<span class="number">-1</span>], <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BuildResolverUrl</span><span class="params">(app <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"> <span class="keyword">return</span> schema + <span class="string">&quot;:///&quot;</span> + app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>register.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> discovery</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;context&quot;</span></span><br><span class="line"> <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"> <span class="string">&quot;errors&quot;</span></span><br><span class="line"> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"> <span class="string">&quot;strconv&quot;</span></span><br><span class="line"> <span class="string">&quot;strings&quot;</span></span><br><span class="line"> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"> clientv3 <span class="string">&quot;go.etcd.io/etcd/client/v3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Register <span class="keyword">struct</span> &#123;</span><br><span class="line"> EtcdAddrs   []<span class="keyword">string</span></span><br><span class="line"> DialTimeout <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"> closeCh     <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"> leasesID    clientv3.LeaseID</span><br><span class="line"> keepAliveCh &lt;-<span class="keyword">chan</span> *clientv3.LeaseKeepAliveResponse</span><br><span class="line"></span><br><span class="line"> srvInfo Server</span><br><span class="line"> srvTTL  <span class="keyword">int64</span></span><br><span class="line"> cli     *clientv3.Client</span><br><span class="line"> logger  *logrus.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewRegister create a register based on etcd</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRegister</span><span class="params">(etcdAddrs []<span class="keyword">string</span>, logger *logrus.Logger)</span> *<span class="title">Register</span></span> &#123;</span><br><span class="line"> <span class="keyword">return</span> &amp;Register&#123;</span><br><span class="line">  EtcdAddrs:   etcdAddrs,</span><br><span class="line">  DialTimeout: <span class="number">3</span>,</span><br><span class="line">  logger:      logger,</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register a service</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Register)</span> <span class="title">Register</span><span class="params">(srvInfo Server, ttl <span class="keyword">int64</span>)</span> <span class="params">(<span class="keyword">chan</span>&lt;- <span class="keyword">struct</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> strings.Split(srvInfo.Addr, <span class="string">&quot;:&quot;</span>)[<span class="number">0</span>] == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;invalid ip address&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> r.cli, err = clientv3.New(clientv3.Config&#123;</span><br><span class="line">  Endpoints:   r.EtcdAddrs,</span><br><span class="line">  DialTimeout: time.Duration(r.DialTimeout) * time.Second,</span><br><span class="line"> &#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> r.srvInfo = srvInfo</span><br><span class="line"> r.srvTTL = ttl</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> err = r.register(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> r.closeCh = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">go</span> r.keepAlive()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> r.closeCh, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Register)</span> <span class="title">register</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"> ctx, cancel := context.WithTimeout(context.Background(), time.Duration(r.DialTimeout)*time.Second)</span><br><span class="line"> <span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"> leaseResp, err := r.cli.Grant(ctx, r.srvTTL)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> r.leasesID = leaseResp.ID</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> r.keepAliveCh, err = r.cli.KeepAlive(context.Background(), r.leasesID); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> data, err := json.Marshal(r.srvInfo)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> _, err = r.cli.Put(context.Background(), BuildRegisterPath(r.srvInfo), <span class="keyword">string</span>(data), clientv3.WithLease(r.leasesID))</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stop stop register</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Register)</span> <span class="title">Stop</span><span class="params">()</span></span> &#123;</span><br><span class="line"> r.closeCh &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// unregister 删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Register)</span> <span class="title">unregister</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"> _, err := r.cli.Delete(context.Background(), BuildRegisterPath(r.srvInfo))</span><br><span class="line"> <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Register)</span> <span class="title">keepAlive</span><span class="params">()</span></span> &#123;</span><br><span class="line"> ticker := time.NewTicker(time.Duration(r.srvTTL) * time.Second)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> &#123;</span><br><span class="line">  <span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> &lt;-r.closeCh:</span><br><span class="line">   <span class="keyword">if</span> err := r.unregister(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    r.logger.Error(<span class="string">&quot;unregister failed, error: &quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> _, err := r.cli.Revoke(context.Background(), r.leasesID); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    r.logger.Error(<span class="string">&quot;revoke failed, error: &quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">case</span> res := &lt;-r.keepAliveCh:</span><br><span class="line">   <span class="keyword">if</span> res == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := r.register(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">     r.logger.Error(<span class="string">&quot;register failed, error: &quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">   <span class="keyword">if</span> r.keepAliveCh == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := r.register(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">     r.logger.Error(<span class="string">&quot;register failed, error: &quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Register)</span> <span class="title">UpdateHandler</span><span class="params">()</span> <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"> <span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">  weightstr := req.URL.Query().Get(<span class="string">&quot;weight&quot;</span>)</span><br><span class="line">  weight, err := strconv.Atoi(weightstr)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">   w.Write([]<span class="keyword">byte</span>(err.Error()))</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> update = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   r.srvInfo.Weight = <span class="keyword">int64</span>(weight)</span><br><span class="line">   data, err := json.Marshal(r.srvInfo)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   _, err = r.cli.Put(context.Background(), BuildRegisterPath(r.srvInfo), <span class="keyword">string</span>(data), clientv3.WithLease(r.leasesID))</span><br><span class="line">   <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := update(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">   w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">   w.Write([]<span class="keyword">byte</span>(err.Error()))</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  w.Write([]<span class="keyword">byte</span>(<span class="string">&quot;update server weight success&quot;</span>))</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Register)</span> <span class="title">GetServerInfo</span><span class="params">()</span> <span class="params">(Server, error)</span></span> &#123;</span><br><span class="line"> resp, err := r.cli.Get(context.Background(), BuildRegisterPath(r.srvInfo))</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> r.srvInfo, err</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> server := Server&#123;&#125;</span><br><span class="line"> <span class="keyword">if</span> resp.Count &gt;= <span class="number">1</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> err := json.Unmarshal(resp.Kvs[<span class="number">0</span>].Value, &amp;server); err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> server, err</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> server, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>resolver.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> discovery</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;context&quot;</span></span><br><span class="line"> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"> clientv3 <span class="string">&quot;go.etcd.io/etcd/client/v3&quot;</span></span><br><span class="line"> <span class="string">&quot;google.golang.org/grpc/resolver&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"> schema = <span class="string">&quot;etcd&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Resolver for grpc client</span></span><br><span class="line"><span class="keyword">type</span> Resolver <span class="keyword">struct</span> &#123;</span><br><span class="line"> schema      <span class="keyword">string</span></span><br><span class="line"> EtcdAddrs   []<span class="keyword">string</span></span><br><span class="line"> DialTimeout <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"> closeCh      <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"> watchCh      clientv3.WatchChan</span><br><span class="line"> cli          *clientv3.Client</span><br><span class="line"> keyPrifix    <span class="keyword">string</span></span><br><span class="line"> srvAddrsList []resolver.Address</span><br><span class="line"></span><br><span class="line"> cc     resolver.ClientConn</span><br><span class="line"> logger *logrus.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewResolver create a new resolver.Builder base on etcd</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewResolver</span><span class="params">(etcdAddrs []<span class="keyword">string</span>, logger *logrus.Logger)</span> *<span class="title">Resolver</span></span> &#123;</span><br><span class="line"> <span class="keyword">return</span> &amp;Resolver&#123;</span><br><span class="line">  schema:      schema,</span><br><span class="line">  EtcdAddrs:   etcdAddrs,</span><br><span class="line">  DialTimeout: <span class="number">3</span>,</span><br><span class="line">  logger:      logger,</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scheme returns the scheme supported by this resolver.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resolver)</span> <span class="title">Scheme</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"> <span class="keyword">return</span> r.schema</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Build creates a new resolver.Resolver for the given target</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resolver)</span> <span class="title">Build</span><span class="params">(target resolver.Target, cc resolver.ClientConn, opts resolver.BuildOptions)</span> <span class="params">(resolver.Resolver, error)</span></span> &#123;</span><br><span class="line"> r.cc = cc</span><br><span class="line"></span><br><span class="line"> r.keyPrifix = BuildPrefix(Server&#123;Name: target.Endpoint, Version: target.Authority&#125;)</span><br><span class="line"> <span class="keyword">if</span> _, err := r.start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> r, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ResolveNow resolver.Resolver interface</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resolver)</span> <span class="title">ResolveNow</span><span class="params">(o resolver.ResolveNowOptions)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Close resolver.Resolver interface</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resolver)</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line"> r.closeCh &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resolver)</span> <span class="title">start</span><span class="params">()</span> <span class="params">(<span class="keyword">chan</span>&lt;- <span class="keyword">struct</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> err error</span><br><span class="line"> r.cli, err = clientv3.New(clientv3.Config&#123;</span><br><span class="line">  Endpoints:   r.EtcdAddrs,</span><br><span class="line">  DialTimeout: time.Duration(r.DialTimeout) * time.Second,</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"> resolver.Register(r)</span><br><span class="line"></span><br><span class="line"> r.closeCh = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> err = r.sync(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">go</span> r.watch()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> r.closeCh, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// watch update events</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resolver)</span> <span class="title">watch</span><span class="params">()</span></span> &#123;</span><br><span class="line"> ticker := time.NewTicker(time.Minute)</span><br><span class="line"> r.watchCh = r.cli.Watch(context.Background(), r.keyPrifix, clientv3.WithPrefix())</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> &#123;</span><br><span class="line">  <span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> &lt;-r.closeCh:</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">case</span> res, ok := &lt;-r.watchCh:</span><br><span class="line">   <span class="keyword">if</span> ok &#123;</span><br><span class="line">    r.update(res.Events)</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">case</span> &lt;-ticker.C:</span><br><span class="line">   <span class="keyword">if</span> err := r.sync(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    r.logger.Error(<span class="string">&quot;sync failed&quot;</span>, err)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// update</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resolver)</span> <span class="title">update</span><span class="params">(events []*clientv3.Event)</span></span> &#123;</span><br><span class="line"> <span class="keyword">for</span> _, ev := <span class="keyword">range</span> events &#123;</span><br><span class="line">  <span class="keyword">var</span> info Server</span><br><span class="line">  <span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> ev.Type &#123;</span><br><span class="line">  <span class="keyword">case</span> clientv3.EventTypePut:</span><br><span class="line">   info, err = ParseValue(ev.Kv.Value)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">   &#125;</span><br><span class="line">   addr := resolver.Address&#123;Addr: info.Addr, Metadata: info.Weight&#125;</span><br><span class="line">   <span class="keyword">if</span> !Exist(r.srvAddrsList, addr) &#123;</span><br><span class="line">    r.srvAddrsList = <span class="built_in">append</span>(r.srvAddrsList, addr)</span><br><span class="line">    r.cc.UpdateState(resolver.State&#123;Addresses: r.srvAddrsList&#125;)</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">case</span> clientv3.EventTypeDelete:</span><br><span class="line">   info, err = SplitPath(<span class="keyword">string</span>(ev.Kv.Key))</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">   &#125;</span><br><span class="line">   addr := resolver.Address&#123;Addr: info.Addr&#125;</span><br><span class="line">   <span class="keyword">if</span> s, ok := Remove(r.srvAddrsList, addr); ok &#123;</span><br><span class="line">    r.srvAddrsList = s</span><br><span class="line">    r.cc.UpdateState(resolver.State&#123;Addresses: r.srvAddrsList&#125;)</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sync 同步获取所有地址信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Resolver)</span> <span class="title">sync</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"> ctx, cancel := context.WithTimeout(context.Background(), <span class="number">3</span>*time.Second)</span><br><span class="line"> <span class="keyword">defer</span> cancel()</span><br><span class="line"> res, err := r.cli.Get(ctx, r.keyPrifix, clientv3.WithPrefix())</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line"> &#125;</span><br><span class="line"> r.srvAddrsList = []resolver.Address&#123;&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> _, v := <span class="keyword">range</span> res.Kvs &#123;</span><br><span class="line">  info, err := ParseValue(v.Value)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="keyword">continue</span></span><br><span class="line">  &#125;</span><br><span class="line">  addr := resolver.Address&#123;Addr: info.Addr, Metadata: info.Weight&#125;</span><br><span class="line">  r.srvAddrsList = <span class="built_in">append</span>(r.srvAddrsList, addr)</span><br><span class="line"> &#125;</span><br><span class="line"> r.cc.UpdateState(resolver.State&#123;Addresses: r.srvAddrsList&#125;)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h4><p>按照结构创建文件，并在user.proto内写入如下内容</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package=<span class="string">&quot;/user;user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> CreateUser(UserInfo) <span class="keyword">returns</span> (Response) </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> Login(UserInfo) <span class="keyword">returns</span> (Response) </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> Info(UserToken) <span class="keyword">returns</span> (UserInfo) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="built_in">int64</span> id = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> username = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">string</span> password = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">string</span> phone = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">    <span class="built_in">int64</span> id = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">string</span> msg = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">UserToken</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> token = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>命令行进入proto文件,并输入该命令生成user.pb.go文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                                           <span class="comment"># output  # input</span></span><br><span class="line">protoc --proto_path=./: --go_out=plugins=grpc:./. ./user/*.proto</span><br></pre></td></tr></table></figure>

<h4 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h4><p>复制出user.pb.go中的内容</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UserServer is the server API for User service.</span></span><br><span class="line"><span class="keyword">type</span> UserServer <span class="keyword">interface</span> &#123;</span><br><span class="line"> CreateUser(context.Context, *UserInfo) (*Response, error)</span><br><span class="line"> Login(context.Context, *UserInfo) (*Response, error)</span><br><span class="line"> Info(context.Context, *UserToken) (*UserInfo, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写入handler/user.go, 并补齐缺失的import、user的model</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;context&quot;</span></span><br><span class="line"> proto <span class="string">&quot;user/proto/user&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserModel <span class="keyword">struct</span> &#123;</span><br><span class="line"> ID       <span class="keyword">int64</span></span><br><span class="line"> Username <span class="keyword">string</span></span><br><span class="line"> Password <span class="keyword">string</span></span><br><span class="line"> Phone    <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"> S service.IUserService</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">CreateUser</span><span class="params">(ctx context.Context, in *proto.UserInfo)</span> <span class="params">(*Response, error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">Login</span><span class="params">(ctx context.Context, in *proto.UserInfo)</span> <span class="params">(*proto.Response, error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">Info</span><span class="params">(ctx context.Context, in *proto.UserToken)</span> <span class="params">(*proto.UserInfo, error)</span></span></span><br></pre></td></tr></table></figure>

<p>再补上具体的方法，就完成了。为了不让这篇教程看起来太臃肿，在这里我略过了repository、service与数据库交互的逻辑、jwt token的生成和验证，使用明文做示例。对jwt不懂的可以单独学习golang如何使用jwt鉴权。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;context&quot;</span></span><br><span class="line"> <span class="string">&quot;errors&quot;</span></span><br><span class="line"> proto <span class="string">&quot;user/proto/user&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;github.com/Jayj1997/go-common&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserModel <span class="keyword">struct</span> &#123;</span><br><span class="line"> ID       <span class="keyword">int64</span></span><br><span class="line"> Username <span class="keyword">string</span></span><br><span class="line"> Password <span class="keyword">string</span></span><br><span class="line"> Phone    <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">CreateUser</span><span class="params">(ctx context.Context, in *proto.UserInfo)</span> <span class="params">(*proto.Response, error)</span></span> &#123;</span><br><span class="line"> user := &amp;UserModel&#123;&#125;</span><br><span class="line"></span><br><span class="line"> out := &amp;proto.Response&#123;&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> err := common.SwapTo(in, user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  out.Msg = <span class="string">&quot;创建用户失败&quot;</span></span><br><span class="line">  <span class="keyword">return</span> out, err</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 在这里填入你存入数据库的逻辑</span></span><br><span class="line"> <span class="keyword">if</span> user.Username != <span class="string">&quot;test&quot;</span> || user.Password != <span class="string">&quot;test&quot;</span> &#123;</span><br><span class="line">  out.Msg = <span class="string">&quot;创建用户失败&quot;</span></span><br><span class="line">  <span class="keyword">return</span> out, errors.New(<span class="string">&quot;创建用户失败&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> out.Id = <span class="number">1</span></span><br><span class="line"> out.Msg = <span class="string">&quot;创建用户成功&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> out, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">Login</span><span class="params">(ctx context.Context, in *proto.UserInfo)</span> <span class="params">(*proto.Response, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"> user := &amp;UserModel&#123;&#125;</span><br><span class="line"></span><br><span class="line"> out := &amp;proto.Response&#123;&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> err := common.SwapTo(in, user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  out.Msg = <span class="string">&quot;登录失败&quot;</span></span><br><span class="line">  <span class="keyword">return</span> out, err</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 在这里填入验证密码的环节</span></span><br><span class="line"> <span class="keyword">if</span> user.Username != <span class="string">&quot;test&quot;</span> || user.Password != <span class="string">&quot;test&quot;</span> &#123;</span><br><span class="line">  out.Msg = <span class="string">&quot;用户名或密码错误&quot;</span></span><br><span class="line">  <span class="keyword">return</span> out, errors.New(<span class="string">&quot;用户名或密码错误&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 在这里通过用户的账号与密码生成jwt返回</span></span><br><span class="line"> out.Msg = <span class="string">&quot;jwt token&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> out, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *User)</span> <span class="title">Info</span><span class="params">(ctx context.Context, in *proto.UserInfo)</span> <span class="params">(*proto.UserInfo, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"> user := &amp;UserModel&#123;</span><br><span class="line">  ID: in.Id,</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> out := &amp;proto.UserInfo&#123;&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 在这里查询数据库获取userInfo</span></span><br><span class="line"> user.Username = <span class="string">&quot;test&quot;</span></span><br><span class="line"> user.Phone = <span class="number">123</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> err := common.SwapTo(user, out); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">&quot;查询失败&quot;</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> out, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>etcd</tag>
      </tags>
  </entry>
</search>
